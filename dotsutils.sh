#!/usr/bin/env bash

CONF_LOCAL_PATH=$DOTFILES_DIR/config/local/$DOTFILES_ID

conf_ln() {
	if test -e "$DOTFILES_DIR/config/local/$DOTFILES_ID/$1"; then
		__symlink "$DOTFILES_DIR/config/local/$DOTFILES_ID/$1" "$2"
		__symlink "$DOTFILES_DIR/config/default/$1" "$(dirname $2)/$(__prefix_filename $(basename $2) 'default')"
	else
		__symlink "$DOTFILES_DIR/config/default/$1" "$2"
	fi
}

conf_copy() {
	if test -e "$DOTFILES_DIR/config/local/$DOTFILES_ID/$1"; then
		__copy "$DOTFILES_DIR/config/local/$DOTFILES_ID/$1" "$2"
		__copy "$DOTFILES_DIR/config/default/$1" "$(dirname $2)/$(__prefix_filename $(basename $2) 'default')"
	else
		__copy "$DOTFILES_DIR/config/default/$1" "$2"
	fi
}

conf_template() {
	local output_file ="${1%.j2}"

	if test -e "$DOTFILES_DIR/config/local/$DOTFILES_ID/$1"; then
		__render_template "$DOTFILES_DIR/config/local/$DOTFILES_ID/$1" "${ouput_file}"
		__render_template "$DOTFILES_DIR/config/default/$1" "$(dirname $output_file)/$(__prefix_filename $(basename $output_file) 'default')"
	else
		__render_template "$DOTFILES_DIR/config/default/$1" "${output_file}"
	fi
}

theme_conf_ln() {
	__symlink "$DOTFILES_DIR/config/themes/$DOTFILES_THEME_NAME/$1" "$2"
}

bin_ln() {
	__symlink "$DOTFILES_DIR/bin/$1" "$2"
}

# FIXME: does not seem to work multiple times when the marker is first line
insert_with_marker() {
	local file="$1" marker="$2" content="$3" comment_char_opening="${4:-#}" comment_char_closing="${5:-#}"
	local start="$comment_char_opening AUTOGENERATED START $marker $comment_char_closing"
	local end="$comment_char_opening AUTOGENERATED END $marker $comment_char_closing"

	# Create temp file to preserve original location
	local temp_file=$(mktemp)

	if __run_with_sudo grep -Fq "$start" "$file" 2>/dev/null; then
		# Replace content between markers
		local start_line=$(__run_with_sudo grep -Fn "$start" "$file" | cut -d: -f1)
		local end_line=$(__run_with_sudo grep -Fn "$end" "$file" | cut -d: -f1)

		# Copy before, insert new content, copy after
		{
			__run_with_sudo head -n $((start_line - 1)) "$file" 2>/dev/null || true
			printf '%s\n%s\n%s\n' "$start" "$content" "$end"
			__run_with_sudo tail -n +$((end_line + 1)) "$file" 2>/dev/null || true
		} >"$temp_file"
		__run_with_sudo cp "$temp_file" "$file"
	else
		# Append new content if markers don't exist
		__run_with_sudo cp "$file" "$temp_file"
		printf '%s\n%s\n%s\n' "$start" "$content" "$end" >>"$temp_file"
		__run_with_sudo cp "$temp_file" "$file"
	fi

	rm -f "$temp_file"
	log_info "inserted content with marker $marker in $file"
}

__render_template() {
	local template_file="$1"
	local output_file="$2"

	if ! __run_with_sudo test -e "$template_file"; then
		log_error "template file $template_file does not exist."
		return 1
	fi

	__run_with_sudo j2 "$template_file" >"$output_file" && log_info "rendered template $template_file to $output_file"
}

__copy() {
	local source="$1"
	local destination="$2"

	backup_and_delete "$destination" && __run_with_sudo mkdir -p "$(dirname "$destination")" && __run_with_sudo cp "$source" "$destination" && log_info "copied $source to $destination"
}

__symlink() {
	local target="$1"
	local link_name="$2"

	backup_and_delete "$link_name" && __run_with_sudo mkdir -p "$(dirname "$link_name")" && __run_with_sudo ln -sT "$target" "$link_name" && log_info "created symlink: $link_name -> $target"
}

# -----------------
# ----- SUDO ------
# -----------------

DOTS_USE_SUDO=false

with_sudo() {
	DOTS_USE_SUDO=true
	"$@"
	DOTS_USE_SUDO=false
}

__run_with_sudo() {
	if [ "$DOTS_USE_SUDO" = true ]; then
		sudo "$@"
	else
		"$@"
	fi
}

# -----------------
# ---- LOGGING ----
# -----------------

color_reset="\033[0m"
color_info="\033[1;34m"    # Bold Blue
color_success="\033[1;32m" # Bold Green
color_warn="\033[1;33m"    # Bold Yellow
color_error="\033[1;31m"   # Bold Red

log_info() { echo -e "${color_info}info: ${color_reset} $*"; }
log_warn() { echo -e "${color_warn}warning: ${color_reset} $*"; }
log_error() { echo -e "${color_error}error: ${color_reset} $*"; }
log_success() { echo -e "${color_success}success: ${color_reset} $*"; }

log_section() {
	echo -e "\n${color_info}===== [ $* ] =====${color_reset}\n"
}

# -----------------
# ---- BACKUP -----
# -----------------

backup_and_delete() {
	local file="$1"

	if __run_with_sudo test -L "$file"; then
		# log_warn "file $file is a symlink, no backup created."
		__run_with_sudo rm -f "$file" && log_info "removed symlink: $file"
		return 0
	fi

	if ! __run_with_sudo test -e "$file"; then
		# log_warn "file $file does not exist, no backup created."
		return 0
	fi

	__run_with_sudo cp -rf "$file" "${file}.bak" && log_info "backup created: ${file}.bak" && __run_with_sudo rm -rf "$file" && log_info "removed file: $file"
}

backup() {
	local file="$1"

	if __run_with_sudo test -L "$file"; then
		# log_warn "file $file is a symlink, no backup created."
		return 0
	fi

	if ! __run_with_sudo test -e "$file"; then
		# log_warn "file $file does not exist, no backup created."
		return 0
	fi

	__run_with_sudo cp -rf "$file" "${file}.bak" && log_info "backup created: ${file}.bak"
}

# -----------------
# ----- PKGS ------
# -----------------

install_pkgs() {
	local packages=("$@")

	if [ ${#packages[@]} -eq 0 ]; then
		log_warn "no packages specified for installation."
		return 1
	fi

	log_info "installing packages: ${packages[*]}"
	sudo pacman -S --noconfirm --needed "${packages[@]}"
}

uninstall_pkgs() {
	local packages=("$@")

	if [ ${#packages[@]} -eq 0 ]; then
		log_warn "no packages specified for uninstallation."
		return 1
	fi

	log_info "uninstalling packages: ${packages[*]}"
	sudo pacman -R --noconfirm "${packages[@]}"
}

install_yay_pkgs() {
	local packages=("$@")

	if [ ${#packages[@]} -eq 0 ]; then
		log_warn "no yay packages specified for installation."
		return 1
	fi

	log_info "installing yay packages: ${packages[*]}"
	yay -S --needed "${packages[@]}"
}

# ------------------
# --- FILENAMES ----
# ------------------

__prefix_filename() {
	local filename="$1"
	local prefix="$2"

	if [[ "$filename" == .* ]]; then
		echo ".${prefix}${filename}"
	else
		echo "${prefix}.${filename}"
	fi

}
